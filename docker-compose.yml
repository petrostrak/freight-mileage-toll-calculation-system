version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
      
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

#   aggregator:
#     container_name: aggregator
#     build:
#       context: .
#       dockerfile: aggregator/Dockerfile
#     restart: always
#     ports:
#       - 3010:3010
#       - 3011:3011
#     networks:
#       - backend

#   gateway:
#     container_name: gateway
#     build:
#       context: .
#       dockerfile: gateway/Dockerfile
#     restart: always
#     ports:
#       - 6000:6000
#     networks:
#       - backend

#   obu:
#     container_name: obu
#     build:
#       context: .
#       dockerfile: obu/Dockerfile
#     restart: always
#     ports:
#       - 30000:30000
#     networks:
#       - backend

#   receiver:
#     container_name: receiver
#     build:
#       context: .
#       dockerfile: receiver/Dockerfile
#     restart: always
#     ports:
#       - 4000:4000
#     networks:
#       - backend

#   distance_calculator:
#     container_name: distance_calculator
#     build:
#       context: .
#       dockerfile: distance_calculator/Dockerfile
#     restart: always
#     ports:
#       - 4001:4001
#     networks:
#       - backend

# networks:
#   backend:
#     name: backend-network
#     driver: bridge

volumes:
  prom_data: